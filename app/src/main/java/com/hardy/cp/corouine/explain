코루틴(Coroutine)이란?

코루틴의 코(Co)는 코틀린의(Ko)가 아니다. "Co"는 with 또는 together 를 의미한다.
코틀린이 만들어지기(2011) 훨씬 전 1958년 멜빈 콘웨이가 코루틴이라는 용어를 만들어냈고 이를 어셈블리 프로그램에 적용했다고 합니다.

코루틴은 루틴의 일종으로, 협동루틴이라고 할 수 있다. 루틴과 서브루틴은 서로 비대칭적인 관계이지만, 코루틴들은 완전히 대칭적인, 즉 서로가 서로를 호출하는 관계입니다.
코루틴 A와 B가 있을 때, A를 프로그래밍 할 때는 B를 A의 서브루틴으로 생각하고, B를 프로그램이 할 때는 A를 B의 서브루틴이라고 생각합니다.
어떠한 코루틴이 발동될 때마다 해당 코루틴은 이전에 자신의 실행이 마지막으로 중단되었던 지점 다음의 장소에서 실행을 재개합니다.

그럼 루틴과 서브루틴이란 무엇인가.
루틴과 서브루틴은 어떤 프로그램이 실행될 때 불려지거나 반복해서 사용되도록 만들어진 일련의 코드들을 지칭하는 용어이다. 서브 루틴은 메인루틴을 보조하는 역할을 합니다.
이를 이용하면 프로그램을 더 짧으면서도 읽고 쓰기 쉽게 만들 수 있으며, 하나의 루틴이 다수의 프로그램에서 사용될 수 있어서 다른 프로그래머들이
코드를 다시 작성하지 않도록 해줍니다. 프로그램 로직의 주요 부분에서는 필요할 경우 공통 루틴으로 분기할 수 있으며, 해당 루틴의 작이 완료되면 분기된 명령어의
다음 명령어로 복귀합니다.

루틴은 반환을 하는 함수이며, 서브루틴은 반환 하지 않는 함수입니다(프로시저와 같다).
C 언어에서는 루틴과 서브루틴을 함수로 통일하여 (반환 함수 ,void 함수) 사용하지만 파스칼 포트란과 같은 언어에서는 다르게 취급합니다.

코루틴은 코루틴이 시작된 스레드를 중단하지 않으면서 비동기적으로 실행되는 코드입니다. 기존의 복잡한 Async Task 또는 다수의 스레드관리를
직접 해주지 않아도 되며, 기존 다중 스레드 보다 훨씬 효율적으로 동작합니다.

https://developer.android.com/jetpack/guide/ui-layer
Google 이 지향하는 아키텍쳐에 코루틴이 들어가 있기 때문에 코루틴에 대한 공부가 필요하다고 생각합니다.






